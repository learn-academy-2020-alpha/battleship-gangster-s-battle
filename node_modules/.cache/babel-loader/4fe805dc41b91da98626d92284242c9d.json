{"ast":null,"code":"var _jsxFileName = \"/Users/learn/Desktop/battleship/src/Components/Board.js\";\nimport React, { Component } from 'react';\nimport Square from \"./Square\";\nimport './Components.css';\n\nclass Board extends Component {\n  constructor(props) {\n    super(props);\n\n    this.startGame = () => {\n      let newShipSpots = [];\n      let newBoardn\n      for (let i = 0; i < 5; i++) {\n        let randomNumber = Math.floor(Math.random() * 99);\n\n        while (newShipSpots.includes(randomNumber)) {\n          randomNumber = Math.floor(Math.random() * 99);\n        }\n\n        newShipSpots.push(randomNumber);\n      }\n\n      this.setState({\n        shipSpots: newShipSpots,\n        counter: 25,\n        gameState: true,\n        board: newBoard\n      });\n    };\n\n    this.handleLocation = index => {\n      if (this.state.gameState) {\n        let {\n          counter,\n          hitSpots,\n          board,\n          shipSpots\n        } = this.state;\n\n        if (shipSpots.includes(index) && board[index] == \"\") {\n          counter--;\n          board[index] = \"H\";\n          hitSpots.push(index);\n        } else if (board[index] === \"\") {\n          counter--;\n          board[index] = \"ðŸ’¥\";\n        }\n\n        this.setState({\n          board: board,\n          counter: counter,\n          hitSpots: hitSpots\n        });\n        this.checkWin();\n        console.log(shipSpots);\n      }\n    };\n\n    this.checkWin = () => {\n      let {\n        board,\n        hitSpots,\n        shipSpots,\n        counter\n      } = this.state;\n      if (hitSpots.length == shipSpots.length) alert(\"You Win\");else if (counter <= 0) {\n        alert(\"You Lose!\");\n\n        for (let i = 0; i < shipSpots.length; i++) {\n          board[shipSpots[i]] = \"S\";\n        }\n\n        this.setState({\n          board: board,\n          counter: 0,\n          gameState: false\n        });\n      }\n    };\n\n    this.state = {\n      boardn      counter: 0,\n      gameState: false,\n      shipSpots: [],\n      hitSpots: []\n    };\n  }\n\n  render() {\n    let square = this.state.board.map((value, index) => {\n      return React.createElement(Square, {\n        handleLocation: this.handleLocation,\n        index: index,\n        value: value,\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      });\n    });\n    return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      className: \"board\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, square, \"Counter: \", this.state.counter, React.createElement(\"button\", {\n      onClick: this.startGame,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, \" Start Game \")));\n  }\n\n}\n\nexport default Board;","map":{"version":3,"sources":["/Users/learn/Desktop/battleship/src/Components/Board.js"],"names":["React","Component","Square","Board","constructor","props","startGame","newShipSpots","newBoard","i","randomNumber","Math","floor","random","includes","push","setState","shipSpots","counter","gameState","board","handleLocation","index","state","hitSpots","checkWin","console","log","length","alert","render","square","map","value"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport Square from \"./Square\"\nimport './Components.css'\nclass Board extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            boardn            counter: 0,\n            gameState: false,\n            shipSpots: [],\n            hitSpots: [],\n        }\n    }\n\n\n    startGame = () => {\n        let newShipSpots = []\n        let newBoardn        for(let i = 0; i < 5; i++){\n            let randomNumber = Math.floor(Math.random() * 99)\n            while(newShipSpots.includes(randomNumber)){\n                randomNumber = Math.floor(Math.random() * 99)\n            }\n            newShipSpots.push(randomNumber);\n        }\n        this.setState({shipSpots: newShipSpots, counter: 25, gameState: true, board: newBoard})\n    }\n\n    handleLocation = (index) => {\n        if (this.state.gameState) {\n        let {counter, hitSpots, board, shipSpots} = this.state\n        if(shipSpots.includes(index) && board[index] == \"\"){\n            counter--\n            board[index] = \"H\"\n            hitSpots.push(index);\n        }\n        else if(board[index] === \"\") {\n            counter--\n            board[index] = \"ðŸ’¥\"\n        }\n            this.setState({board: board, counter: counter, hitSpots: hitSpots})\n            this.checkWin()\n            console.log(shipSpots)\n        }\n    }\n\n    checkWin = () => {\n        let {board, hitSpots, shipSpots, counter} = this.state\n        if (hitSpots.length == shipSpots.length)    alert(\"You Win\")\n\n        else if (counter <= 0 ) {\n            alert(\"You Lose!\")\n            for(let i=0; i < shipSpots.length; i++)\n            {board[shipSpots[i]] = \"S\"}\n            this.setState({board: board, counter: 0, gameState: false})\n        }\n    }\n\n    render(){\n        let square = this.state.board.map((value, index) => {\n            return (\n                <Square\n                    handleLocation={ this.handleLocation }\n                    index={ index }\n                    value={ value }\n                    key={ index }\n                />\n            )\n          }\n      )\n\n    return(\n        <>\n            <div className=\"board\">\n                { square }\n                Counter: {this.state.counter}\n                <button onClick={this.startGame}> Start Game </button>\n            </div>\n        </>\n        );\n    }\n}\n\nexport default Board\n"]},"metadata":{},"sourceType":"module"}